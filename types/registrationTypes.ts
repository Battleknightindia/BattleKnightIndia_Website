// Interface for individual player data
export interface Player {
    // Database fields (optional in frontend state before submission or if loaded)
    id?: string; // UUID from DB
    team_id?: string | null; // UUID from DB
    university_id?: string | null; // UUID from DB
    created_at?: string; // Timestamp from DB

    // Fields collected in the form (required based on DB schema or form logic)
    name: string;
    ign: string;
    role: 'captain' | 'player' | 'substitute' | 'coach'; // Matches DB constraint

    // Optional fields collected in the form
    game_id?: string | null;
    server_id?: string | null;
    email?: string | null;
    mobile?: string | null;
    city?: string | null; // City of player (from Step 3)
    state?: string | null; // State of player (from Step 3)
    device?: string | null;

    // File fields (can hold File object in state before upload, string URL from DB after upload, or null)
    student_id_url: string | File | null;

    // Add any other fields if your PlayerForm collects them
}

// Interface for the players section data (Record keyed by 1-based index)
export interface PlayersStepData extends Record<string, Player | undefined> {}

// Interface for the university section data (Step 1)
export interface UniversityStepData {
    name: string;
    city: string; // City of university (from Step 1) - Note: not in provided universities DB schema
    state: string; // State of university (from Step 1) - Note: not in provided universities DB schema
    logo: File | string | null; // University logo file or URL
    id?: string | null; // University ID (generated by backend, stored in state after save)
}

// Interface for the team section data (Step 2)
export interface TeamStepData {
    name: string;
    referral_code: string,
    logo: File | string | null; // Team logo file or URL
    // ... other team fields if any
    id?: string | null; // Team ID (generated by backend, stored in state after save)
}

// Interface for the overall form data state managed by FormContent
export interface RegistrationFormData {
    university: UniversityStepData;
    team: TeamStepData;
    players: PlayersStepData;
    // Add other steps/data interfaces here if needed
    termsAccepted: boolean; // State for terms and conditions acceptance (Step 4)
}

export type PlayerData = {
  index: number;
  name: string;
  ign: string;
  gameId: string;
  serverId: string;
  role: "captain" | "player" | "substitute" | "coach";
  email: string | null;
  mobile: string | null;
  city: string | null;
  state: string | null;
  device: string | null;
  studentId: File | null;
};

export type RegistrationData = {
  universityName: string;
  universityState: string;
  universityCity: string;
  universityLogo: File | null;
  teamName: string;
  teamLogo: File | null;
  referralCode: string;
  players: PlayerData[];
};